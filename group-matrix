#!/bin/bash

#####################################################################################
#
# The MIT License (MIT)
#
# Copyright (c) 2015-2017 Jules Kerssemakers / Deutsches Krebsforschungszentrum Heidelberg (DKFZ)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#####################################################################################

# This script shows a membership matrix of all users in the queried groups

USAGE="USAGE:   $0 AD_GROUP [AD_GROUP...]

Prints a matrix showing which members are in which group.
The script outputs pretty-printed tables if the output is the terminal
If the output goes to a file or pipe, a standard CSV format is emitted instead

Example terminal output:

# ./group-matrix group1 group2 group3
USERS  group1  group2  group3
user1  Y
user2  Y       Y       Y
user3  Y
user4  Y       Y

Example redirected output:
# ./group-matrix group1 group2 group3 | cat
USERS,group1,group2,group3
user1,Y,,
user2,Y,Y,Y
user3,Y,,
user4,Y,Y,

Please note that input groups are sorted and de-duplicated, so output column order
will not necessarily match the order specified on the command line.
"

# check invocation
if [ $# -lt 1 ]; then
  echo "Not enough arguments! (expected one or more AD-groups)"
  echo "$USAGE"
  exit 1
fi


# Load the secrets such as password and hostname from somewhere not-in-git
source "${XDG_CONFIG_HOME:-"$HOME"/.config}/ldap-summary.conf"


# Which groups to process?
# First: sort and deduplicate the groups. This is necessary, because processing a group multiple times
# would lead to re-use of the groups' previous tempfile further down, thus resetting progress and losing results.
# thank you StackOverflow for the deduplication logic:
#   https://stackoverflow.com/questions/13648410/how-can-i-get-unique-values-from-an-array-in-bash
# specifically this answer: https://stackoverflow.com/a/13648438/2964696
GRPS=($(echo "$@" | tr ' ' '\n' | sort -u | tr '\n' ' '))


# We will generate lots of temp-files.
#   keep them all in one place for easy cleanup later
TMPDIR=$(mktemp -d --suffix="-group-matrix-tmp")
# column-separator in tmp-files
SEPARATOR='#'


# prints the usernames in a group to stdout
ldapmembers() {
  GRP=$1;
  ldapsearch -u -LLL \
    -h "$JK_LDAPHOST" -w "$JK_LDAPPASSWORD" \
    -D "$JK_BINDDN" -b "$JK_SEARCHBASE" \
    -x \
    cn="$GRP" member  \
  | sed -r -e 's/\r?\n //g' -e 's/^member: CN=(\w+?),.+$/MEMBER:\1/' \
  | grep '^MEMBER:' \
  | sed 's/^MEMBER://' \
  | sort
}


# given a group-name, generates the (re-used) tmp-file path
# for the file containing that group's members
membertmp() {
  echo "$TMPDIR/members-$1.txt"
}




# intermediate tracking: all users we've seen
# needed for consistent sort-ordering later on
ALL_USERS="$TMPDIR/all-users.txt"
ALL_USERS_UNIQ="$ALL_USERS-uniq.txt"

# obtain the users in each individual group
for GRP in ${GRPS[*]}; do
  GRP_MEMBERS=$(membertmp $GRP)

  # Header
  echo "names${SEPARATOR}${GRP}" > "$GRP_MEMBERS"

  # Get the group members.
  #
  # Output is stored twice
  # 1) just the usernames in $ALL_USERS file
  # 2) in the group-specific file, as "username<SEPARATOR>Y"
  #     This will make for a more compact table after joining.
  #     We join on column 1, but emit only column 2. This 'clever' join-ing
  #     leaves only a "Y(es)" in each group-column if the user is a member
  #     instead of repeating the full username
  ldapmembers $GRP \
    | sort \
    | tee -a "$ALL_USERS" \
    | sed -Ee "s/(.+)/\1${SEPARATOR}Y/" >> "$GRP_MEMBERS"
done;

# make the user index column
# all distinct usernames from all groups combined
sort -u "$ALL_USERS" >> "$ALL_USERS_UNIQ"



# see which users are expired

# current time, in LDAP timestamp format.
# magic numbers:
#   11644473600 = 1.1.1600 (windows epoch) -> 1.1.1970 (linux epoch) difference in seconds
#   10 000 000  = factor for (windows) 100-nanosecond resolution from (linux) seconds
AD_NOW=$(( ($(date '+%s') + 11644473600 ) * 10000000 ))
ALL_USERS_UNIQ_WITH_STATUS="$TMPDIR/user-status.txt"
echo "USERS${SEPARATOR}STATUS" > "$ALL_USERS_UNIQ_WITH_STATUS" # header
while read USER; do
  expire_time=$(ldapsearch -u -LLL \
      -h "$JK_LDAPHOST" -w "$JK_LDAPPASSWORD" \
      -D "$JK_BINDDN" -b "$JK_SEARCHBASE" \
      -x \
      cn="$USER" accountExpires  \
    | sed -r -e 's/\r?\n //g' \
    | grep '^accountExpires:' \
    | sed 's/accountExpires: //'
  )
  if [ "$expire_time" -lt "$AD_NOW" ]; then
    echo "${USER}${SEPARATOR}EXPIRED" >> "$ALL_USERS_UNIQ_WITH_STATUS"
  else
    echo "${USER}${SEPARATOR}active" >> "$ALL_USERS_UNIQ_WITH_STATUS"
  fi
done < "$ALL_USERS_UNIQ"



# "recursively" join all member-files to the user index column
PREV="$ALL_USERS_UNIQ_WITH_STATUS"
for GRP in ${GRPS[*]}; do
  # input and output for this iteration
  CURRENT=$(membertmp $GRP)
  INTERMEDIATE="$TMPDIR/jointmp-$GRP.txt"

  # actual join
  # NB: "-o auto -e' '" is REQUIRED to make the alignment work
  #   otherwise, empty columns will be overlooked by the pretty-printing later
  #   leading to incorrect results (displaying incorrect group memberships)
  join \
     --header \
     -t"${SEPARATOR}" \
     -j1 \
     -a1 -a2 \
     -o auto -e ' ' \
     "$PREV" "$CURRENT"  >  "$INTERMEDIATE"

  # advance iteration
  PREV="$INTERMEDIATE"
done



# print final output, dependant on terminal or pipe/file
if [ -t 1 ]; then
  # we're outputting to a terminal, pretty-print
  column --separator "${SEPARATOR}" --table "$PREV"
else
  # we're outputting to a file or pipe, create CSV
  sed -E -e "s/${SEPARATOR}/,/g" -e 's/ +//g' "$PREV"
fi

# clean-up our tmp-files
rm -rf "$TMPDIR"
